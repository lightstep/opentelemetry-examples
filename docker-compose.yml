version: "3.7"
services:
    ###########################
    ####### Go examples #######
    ###########################
    go-opentracing-server:
        container_name: go-opentracing-server
        image: ghcr.io/lightstep/opentelemetry-examples:go-opentracing-server
        build: ./go/opentracing/server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=go-opentracing-server
            - LS_SERVICE_VERSION=5
        stop_grace_period: 1s
    go-opentracing-client:
       container_name: go-opentracing-client
       image: ghcr.io/lightstep/opentelemetry-examples:go-opentracing-client
       build: ./go/opentracing/client
       networks:
           - demo
       depends_on:
           - go-opentracing-server
       env_file:
           - .env
       environment:
           - LS_SERVICE_NAME=go-opentracing-client
           - LS_SERVICE_VERSION=1.2.7
           - DESTINATION_URL=http://go-opentracing-server:8081/ping
       stop_grace_period: 1s
    go-opentelemetry-collector-server:
        container_name: go-opentelemetry-collector-server
        image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-collector-server
        build: ./go/opentelemetry/collector/server
        networks:
            - demo
        env_file:
            - .env
        depends_on:
            - otel-collector
        environment:
            - LS_SATELLITE_URL=otel-collector:4317
            - LS_INSECURE=1
            - LS_SERVICE_NAME=go-opentelemetry-collector-server
            - LS_SERVICE_VERSION=9.9.1
        stop_grace_period: 1s
    go-opentelemetry-collector-client:
       container_name: go-opentelemetry-collector-client
       image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-collector-client
       build: ./go/opentelemetry/collector/client
       networks:
           - demo
       depends_on:
           - go-opentelemetry-collector-server
           - otel-collector
       env_file:
           - .env
       environment:
           - LS_SATELLITE_URL=otel-collector:4317
           - LS_INSECURE=1
           - LS_SERVICE_NAME=go-opentelemetry-collector-client
           - LS_SERVICE_VERSION=9.9.2
           - DESTINATION_URL=http://go-opentelemetry-collector-server:8081/ping
       stop_grace_period: 1s
    go-opentelemetry-otlp-server:
        container_name: go-opentelemetry-otlp-server
        image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-otlp-server
        build: ./go/opentelemetry/otlp/server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - LS_SATELLITE_URL=ingest.lightstep.com:443
            - LS_INSECURE=1
            - LS_SERVICE_NAME=go-opentelemetry-otlp-server
            - LS_SERVICE_VERSION=9.9.1
        stop_grace_period: 1s
    go-opentelemetry-otlp-client:
       container_name: go-opentelemetry-otlp-client
       image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-otlp-client
       build: ./go/opentelemetry/otlp/client
       networks:
           - demo
       depends_on:
           - go-opentelemetry-otlp-server
       env_file:
           - .env
       environment:
           - LS_SATELLITE_URL=ingest.lightstep.com:443
           - LS_INSECURE=1
           - LS_SERVICE_NAME=go-opentelemetry-otlp-client
           - LS_SERVICE_VERSION=9.9.2
           - DESTINATION_URL=http://go-opentelemetry-otlp-server:8081/ping
       stop_grace_period: 1s
    go-launcher-server:
        container_name: go-launcher-server
        image: ghcr.io/lightstep/opentelemetry-examples:go-launcher-server
        build: ./go/launcher/server
        networks:
            - demo
        depends_on:
            - otel-collector
        env_file:
            - .env
        environment:
            - LS_SATELLITE_URL=otel-collector:4317
            - LS_SERVICE_NAME=go-launcher-server
            - LS_SERVICE_VERSION=9.9.9
        stop_grace_period: 1s
    go-launcher-client:
       container_name: go-launcher-client
       image: ghcr.io/lightstep/opentelemetry-examples:go-launcher-client
       build: ./go/launcher/client
       networks:
           - demo
       depends_on:
           - go-launcher-server
           - otel-collector
       env_file:
           - .env
       environment:
           - LS_SATELLITE_URL=otel-collector:4317
           - LS_SERVICE_NAME=go-launcher-client
           - LS_SERVICE_VERSION=9.9.8
           - DESTINATION_URL=http://go-launcher-server:8081/ping
       stop_grace_period: 1s
    ###############################
    ####### Python examples #######
    ###############################
    py-opentelemetry-auto-collector-client:
       container_name: py-opentelemetry-auto-collector-client
       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-client
       build:
           context: ./python/opentelemetry/auto_instrumentation
           dockerfile: Dockerfile.client
       networks:
           - demo
       depends_on:
           - py-opentelemetry-auto-collector-server
           - otel-collector
       env_file:
           - .env
       environment:
           - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
           - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317
           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-collector-client,service.version=1.2.9
           - DESTINATION_URL=http://py-opentelemetry-auto-collector-server:8081/ping
       stop_grace_period: 1s
    py-opentelemetry-auto-collector-server:
        container_name: py-opentelemetry-auto-collector-server
        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-server
        build:
            context: ./python/opentelemetry/auto_instrumentation
            dockerfile: Dockerfile.server
        networks:
            - demo
        depends_on:
            - otel-collector
        env_file:
            - .env
        environment:
            - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
            - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317
            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-collector-server,service.version=0.2.8
        stop_grace_period: 1s
    py-opentelemetry-auto-otlp-client:
       container_name: py-opentelemetry-auto-otlp-client
       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-client
       build:
           context: ./python/opentelemetry/auto_instrumentation
           dockerfile: Dockerfile.client
       networks:
           - demo
       depends_on:
           - py-opentelemetry-auto-otlp-server
       env_file:
           - .env
       environment:
           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-otlp-client,service.version=10.10.10
           - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=ingest.lightstep.com:443
           - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=ingest.lightstep.com:443
           - DESTINATION_URL=http://py-opentelemetry-auto-otlp-server:8081/ping
       stop_grace_period: 1s
    py-opentelemetry-auto-otlp-server:
        container_name: py-opentelemetry-auto-otlp-server
        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-server
        build:
            context: ./python/opentelemetry/auto_instrumentation
            dockerfile: Dockerfile.server
        networks:
            - demo
        # depends_on:
        #     - redis
        #     - postgres
        #     - mysql
        #     - mongo
        env_file:
            - .env
        environment:
            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-otlp-server,service.version=10.10.9
            - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=ingest.lightstep.com:443
            - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=ingest.lightstep.com:443
        stop_grace_period: 1s
    py-launcher-client:
       container_name: py-launcher-client
       image: ghcr.io/lightstep/opentelemetry-examples:py-launcher-client
       build:
           context: ./python/launcher
           dockerfile: Dockerfile.client
       networks:
           - demo
       depends_on:
           - py-launcher-server
       env_file:
           - .env
       environment:
           - LS_SERVICE_NAME=py-launcher-client
           - LS_SERVICE_VERSION=10.10.10
           - DESTINATION_URL=http://py-launcher-server:8081/ping
       stop_grace_period: 1s
    py-launcher-server:
        container_name: py-launcher-server
        image: ghcr.io/lightstep/opentelemetry-examples:py-launcher-server
        build:
            context: ./python/launcher
            dockerfile: Dockerfile.server
        networks:
            - demo
        # depends_on:
        #     - redis
        #     - postgres
        #     - mysql
        #     - mongo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=py-launcher-server
            - LS_SERVICE_VERSION=10.10.9
        stop_grace_period: 1s
    demo-client-otlp:
       container_name: demo-client-otlp
       build:
           context: ./demo-client/otlp
           dockerfile: Dockerfile
       networks:
           - demo
       env_file:
           - .env
       environment:
           - INTEGRATION_CONFIG_FILE=/config/integration.yml
           - LS_SERVICE_NAME=demo-client-otlp
           - LS_SERVICE_VERSION=0.1.1
       volumes:
           - ./config:/config/:ro
       stop_grace_period: 1s
    py-opentracing-client:
       container_name: py-opentracing-client
       image: ghcr.io/lightstep/opentelemetry-examples:py-opentracing-client
       build:
           context: ./python/opentracing
           dockerfile: Dockerfile.client
       networks:
           - demo
       depends_on:
           - py-opentracing-server
       env_file:
           - .env
       environment:
           - LS_SERVICE_NAME=py-opentracing-client
           - LS_SERVICE_VERSION=10.10.10
           - DESTINATION_URL=http://py-opentracing-server:5000/ping
       stop_grace_period: 1s
    py-opentracing-server:
        container_name: py-opentracing-server
        image: ghcr.io/lightstep/opentelemetry-examples:py-opentracing-server
        build:
            context: ./python/opentracing
            dockerfile: Dockerfile.server
        networks:
            - demo
        depends_on:
            - redis
            - postgres
            - mysql
            - mongo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=py-opentracing-server
            - LS_SERVICE_VERSION=10.10.9
        stop_grace_period: 1s
    ###################################
    ####### Javascript examples #######
    ###################################
    js-launcher-server:
        container_name: js-launcher-server
        image: ghcr.io/lightstep/opentelemetry-examples:js-launcher-server
        build: ./nodejs/launcher/server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=https://ingest.lightstep.com:443/api/v2/otel/trace
            - LS_SERVICE_NAME=js-launcher-server
        stop_grace_period: 1s
    js-launcher-client:
       container_name: js-launcher-client
       image: ghcr.io/lightstep/opentelemetry-examples:js-launcher-client
       build: ./nodejs/launcher/client
       networks:
           - demo
       depends_on:
           - js-launcher-server
       env_file:
           - .env
       environment:
           - LS_SERVICE_NAME=js-launcher-client
           - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=https://ingest.lightstep.com:443/api/v2/otel/trace
           - DESTINATION_URL=http://js-launcher-server:8080/ping
       stop_grace_period: 1s
    js-ot-shim-server:
        container_name: js-ot-shim-server
        image: ghcr.io/lightstep/opentelemetry-examples:js-ot-shim-server
        build: ./nodejs/ot-shim/server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=https://ingest.lightstep.com:443/api/v2/otel/trace
            - LS_SERVICE_NAME=js-ot-shim-server
        stop_grace_period: 1s
    js-ot-shim-client:
       container_name: js-ot-shim-client
       image: ghcr.io/lightstep/opentelemetry-examples:js-ot-shim-client
       build: ./nodejs/ot-shim/client
       networks:
           - demo
       depends_on:
           - js-ot-shim-server
       env_file:
           - .env
       environment:
           - LS_SERVICE_NAME=js-ot-shim-client
           - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=https://ingest.lightstep.com:443/api/v2/otel/trace
           - DESTINATION_URL=http://js-ot-shim-server:8080/ping
       stop_grace_period: 1s
    ##############################
    ####### Java examples ########
    ##############################
    java-specialagent-server:
        container_name: java-specialagent-server
        image: ghcr.io/lightstep/opentelemetry-examples:java-specialagent-server
        build: ./java/server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=java-specialagent-server
            - LS_SERVICE_VERSION=4.3.2
        stop_grace_period: 1s
    java-specialagent-client:
       container_name: java-specialagent-client
       image: ghcr.io/lightstep/opentelemetry-examples:java-specialagent-client
       build: ./java/client
       networks:
           - demo
       depends_on:
           - java-specialagent-server
       env_file:
           - .env
       environment:
           - LS_SERVICE_NAME=java-specialagent-client
           - LS_SERVICE_VERSION=3.2.1
           - DESTINATION_URL=http://java-specialagent-server:8083/ping
       stop_grace_period: 1s
    java-otlp-client:
       container_name: java-otlp-client
       image: ghcr.io/lightstep/opentelemetry-examples:java-otlp-client
       build:
           context: ./java/otlp
           dockerfile: Dockerfile.client
       networks:
           - demo
       depends_on:
           - java-otlp-server
       env_file:
           - .env
       environment:
           - OTEL_RESOURCE_ATTRIBUTES=service.name=java-otlp-client,service.version=11.11.10
           - LS_SATELLITE_URL=ingest.lightstep.com:443
           - DESTINATION_URL=http://java-otlp-server:8083/ping
       stop_grace_period: 1s
    java-otlp-server:
        container_name: java-otlp-server
        image: ghcr.io/lightstep/opentelemetry-examples:java-otlp-server
        build:
            context: ./java/otlp
            dockerfile: Dockerfile.server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - OTEL_RESOURCE_ATTRIBUTES=service.name=java-otlp-server,service.version=11.11.11
            - LS_SATELLITE_URL=ingest.lightstep.com:443
        stop_grace_period: 1s
    java-launcher-client:
       container_name: java-launcher-client
       image: ghcr.io/lightstep/opentelemetry-examples:java-launcher-client
       build:
           context: ./java/launcher
           dockerfile: Dockerfile.client
       networks:
           - demo
       depends_on:
           - java-launcher-server
       env_file:
           - .env
       environment:
           - LS_SERVICE_NAME=java-launcher-client
           - LS_SERVICE_VERSION=11.11.10
           - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=ingest.lightstep.com
           - DESTINATION_URL=http://java-launcher-server:8084/ping
       stop_grace_period: 1s
    java-launcher-server:
        container_name: java-launcher-server
        image: ghcr.io/lightstep/opentelemetry-examples:java-launcher-server
        build:
            context: ./java/launcher
            dockerfile: Dockerfile.server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=java-launcher-server
            - LS_SERVICE_VERSION=11.11.11
            - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=ingest.lightstep.com
        stop_grace_period: 1s
    java-opentracing-server:
        container_name: java-opentracing-server
        image: ghcr.io/lightstep/opentelemetry-examples:java-opentracing-server
        build:
            context: ./java/microdonuts
            dockerfile: Dockerfile
        networks:
            - demo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=java-opentracing-server
            - OTEL_RESOURCE_ATTRIBUTES=service.version=19.19.19
            - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=ingest.lightstep.com
            - DESTINATION_URL=http://java-opentracing-server:10001/order
        stop_grace_period: 1s
    ################################
    ####### Integration test #######
    ################################
    integration-test:
        container_name: integration-test
        image: ghcr.io/lightstep/opentelemetry-examples:integration-test
        build:
            context: ./tools/integration
        networks:
            - demo
        depends_on:
            - go-opentracing-server
            - go-opentelemetry-collector-server
            - go-opentelemetry-otlp-server
            - go-launcher-server
            - py-opentelemetry-auto-collector-server
            - py-opentelemetry-auto-otlp-server
            - py-launcher-server
            - py-opentracing-server
            - js-launcher-server
            - js-ot-shim-server
            - java-specialagent-server
            - java-otlp-server
            - java-launcher-server
            - java-opentracing-server
        env_file:
            - .env
        environment:
            - OTEL_LOG_LEVEL=error
            - LS_SERVICE_NAME=integration-test
            - OTEL_RESOURCE_ATTRIBUTES=service.version=2020.10.02
            - OTEL_PROPAGATORS=b3,b3multi,tracecontext
        volumes:
            - ./config:/config/:ro
        stop_grace_period: 1s
    ################################
    ####### Config generator #######
    ################################
    config-generator:
        container_name: config-generator
        image: ghcr.io/lightstep/opentelemetry-examples:config-generator
        build:
            context: ./tools/integration
        environment:
            - DOCKER_COMPOSE_PATH=/docker-compose.yml
            - OUTPUT_PATH=/config/integration.yml
        volumes:
            - ./docker-compose.yml:/docker-compose.yml/:ro
            - ./config:/config/:rw
        command: python /app/generate_config.py
        stop_grace_period: 1s
    ##############################
    ####### Extra services #######
    ##############################
    mongo:
        container_name: mongo
        image: mongo:latest
        networks:
            - demo
        stop_grace_period: 1s
        ports:
            - 0.0.0.0:27017:27017
    mysql:
        container_name: mysql
        image: mysql:5.7
        restart: always
        environment:
            MYSQL_USER: testuser
            MYSQL_PASSWORD: testpassword
            MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            MYSQL_DATABASE: opentelemetry-tests
        networks:
            - demo
        stop_grace_period: 1s
    postgres:
        container_name: postgres
        image: postgres:10.5-alpine
        environment:
            POSTGRES_USER: testuser
            POSTGRES_PASSWORD: testpassword
            POSTGRES_DB: opentelemetry-tests
        networks:
            - demo
        ports:
            - 0.0.0.0:5432:5432
        stop_grace_period: 1s
    redis:
        container_name: redis
        image: redis:7.0-alpine
        networks:
            - demo
        ports:
            - 0.0.0.0:6379:6379
        stop_grace_period: 1s
    apache:
        build: ./collector/apache/httpd
        container_name: apache
        ports:
            - '8080:80'
        networks:
            - demo
        volumes:
            - ./collector/apache/httpd/website:/usr/local/apache2/htdocs
        stop_grace_period: 1s
    otel-collector:
        container_name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.50.0
        command: ["--config=/conf/collector-config.yaml"]
        networks:
            - demo
        volumes:
            - ./config:/conf/:rw
        ports:
            - "0.0.0.0:8889:8889"   # Prometheus exporter metrics
            - "0.0.0.0:4317:4317" # OTLP receiver
    # aws-otel-collector:
    #     image: amazon/aws-otel-collector:latest
    #     networks:
    #         - demo
    #     command: ["--config=/etc/otel-agent-config.yaml", "--log-level=DEBUG"]
    #     ports:
    #         - "0.0.0.0:55680:55680" # OTLP receiver
    #     volumes:
    #         - ./collector/collector-config.yaml:/etc/otel-agent-config.yaml
    #     env_file:
    #         - .env
    # jaeger:
    #     container_name: jaeger
    #     image: jaegertracing/all-in-one:latest
    #     ports:
    #         - "0.0.0.0:16686:16686"
    #     networks:
    #         - demo
    #         # docker run -p 16686:16686 -p 14268:14268 -p 6831:6831/udp -p 14250:14250 
    #     stop_grace_period: 1s
    # optionally configure a satellite here
    # satellite:
    #     container_name: satellite
    #     image: satlocal:latest
    #     env_file:
    #         - .env
    #     networks:
    #         - demo
    #     ports:
    #         - "0.0.0.0:8360:8360"   # Satellite ingest port
    #     stop_grace_period: 1s
networks:
    demo:
